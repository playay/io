<!DOCTYPE html>
<html lang="zh-CN" class="uk-height-1-1">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="hostname" content="feling.io" />
<meta name="description" content="fredis 是一个网页版 redis 客户端，基于“ws2s项目”开发。有基本的GUI图形界面，能编辑保存服务器信息、提供 redis 命令行终端、保存历史命令。所有数据存储在 localStorage。" />
<meta name="keywords" content="redis,redis GUI,redis client" />
<meta name="robots" content="all" />
<meta name="author" content="feling.io" />
<title>

    fredis

</title>
<link rel="stylesheet" href="./css/feling.css" media="all">
<link rel="icon" type="image/png" href="./favicon.png">
<script src="./js/jquery-3.3.1.min.js"></script>
<script src="./js/vue.min.js"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/vue@2.5.13/dist/vue.js"></script> -->
<script src="./js/ajaxWithFelingParams.js"></script>
<script src="./js/uikit.min.js" async></script>
<script src="./js/sticky.min.js" async></script><!-- header 始终显示 -->


</head>
<body class="uk-height-1-1" style="padding-bottom:60px;">
    <header data-uk-sticky class="uk-modal-header">
    <script>
$(function() {
    $(window).scroll(function() {
        if ($(window).scrollTop() > 400)
            $('div.go-top').show();
        else
            $('div.go-top').hide();
    });
    $('div.go-top').click(function() {
        $('html, body').animate({scrollTop: 0}, 400);
    });
});
</script>
<div class="go-top">
    <div class="arrow"></div>
    <div class="stick"></div>
</div>

<nav id="navbar" class="uk-navbar">
    <a class="uk-navbar-brand" href="/">io</a>
    <ul class="uk-navbar-nav uk-visible-large">
        <li v-if="'fredis' != 'feling.io'" v-bind:class="{ 'uk-active': 'fredis' == 'Json 格式化' }">
            <a href="/json/">Json</a></li>

        <li v-if="'fredis' != 'feling.io'" v-bind:class="{ 'uk-active': 'fredis' == 'Base64 编解码' }">
            <a href="/base64/">Base64</a></li>

        <li v-if="'fredis' != 'feling.io'" v-bind:class="{ 'uk-active': 'fredis' == 'fredis' }">
                <a href="/redis/">Redis</a></li>
    </ul>
    <a class="uk-navbar-nav uk-navbar-content" href="https://pages.feling.net">笔记</a>
    
    <div class="uk-navbar-flip">
        <a id="signInButton" class="uk-navbar-brand" onselectstart="return false;" style="display:none;font-size:16px;" onClick="signIn()">
            <i id="signInSpinner" class="uk-icon-spinner uk-icon-spin" style="display:none"></i> <i class="uk-icon-google"> 登录</i>
        </a>
        <ul id="userAvatarAndName" class="uk-navbar-nav" style="display:none;">
            <li class="uk-parent" data-uk-dropdown>
                <div class="uk-navbar-content">
                    <img id="userAvatar" style="width:30px;height:30px;border-radius:50%;">
                    <span id="userName" style="font-size:16px;"></span>
                </div>
                <div class="uk-dropdown uk-dropdown-small uk-dropdown-navbar">
                    <ul class="uk-nav uk-nav-navbar">
                        <li><a href="mailto:chenyan@feling.net?subject=对“fredis”的意见与建议">意见与建议</a></li>
                        <li><a onClick="signOut()">退出<i id="signOutSpinner" class="uk-icon-spinner uk-icon-spin" style="display:none"></i></a></li>
                    </ul>
                </div>
            </li>
        </ul>
        <script>
            function signIn() {
                if (typeof googleyolo == "undefined") {
                    UIkit.modal.alert('谷歌一键登录操作失败, 请确认网络环境')
                    return
                }
                signInWithGoogle(true)
            }
            function signOut() {
                $("#signOutSpinner").show()
                WithFParams.postForm('/login/signOut', {}, () => { })
                    .always(() => {
                        localStorage.removeItem('accessToken')
                        localStorage.removeItem('userAvatar')
                        localStorage.removeItem('userName')
                        $("#signInButton").show()
                        $("#userAvatarAndName").hide()
                        $("#signOutSpinner").hide()
                    })
                if (typeof googleyolo != "undefined") {
                    googleyolo.disableAutoSignIn().then(() => { })
                }
            }
            function loadUserAvatarAndNameFormLocalStorage2ShowInNavBar () {
                if (localStorage.accessToken) {
                    $("#userAvatar").attr("src", localStorage.userAvatar)
                    $("#userName").html(localStorage.userName)
                    $("#userAvatarAndName").show()
                    $("#signInButton").hide()
                } else {
                    $("#userAvatarAndName").hide()
                }
            }
            if (localStorage.accessToken) {
                WithFParams.postForm('/login/getLoginInfo',
                    {
                        accessToken: localStorage.accessToken
                    },
                    (result) => {
                        if (result.success && result.data) {
                            localStorage.userAvatar = result.data.userAvatar
                            localStorage.userName = result.data.userName
                        } else {
                            localStorage.removeItem('accessToken')
                            localStorage.removeItem('userAvatar')
                            localStorage.removeItem('userName')
                            $("#signInButton").show()
                            $("#userAvatarAndName").hide()
                        }
                    }
                ).always(() => {
                    loadUserAvatarAndNameFormLocalStorage2ShowInNavBar()
                })
            } else {
                loadUserAvatarAndNameFormLocalStorage2ShowInNavBar()
            }
        </script>
    </div>
</nav>
<script>
    var vm_navbar = new Vue({
        el: '#navbar'
    })
</script>

<div id="googleThings"></div>
<script src="./js/googleThings.js" async defer></script>


    </header>
    <hr>
    <div class="uk-container uk-height-1-1" style="margin-top:10px;">
        
<div id="main" class="uk-height-1-1">
    <div class="uk-flex uk-height-1-1">
        <div style="width:24%;margin-right:10px;padding-bottom:50px;" class="uk-height-1-1">
            <button class="uk-button uk-width-1-1" 
                    v-on:click="editOne()">add new connection</button>
            <ul class="uk-list uk-list-line uk-height-1-1" 
                style="overflow:scroll;">
                <li v-for="connection in redisConnections">
                    <span>{{connection.name}}</span>
                    <button class="uk-button" style="float:right;"
                            v-bind:class="{'uk-button-success': openedConnections.includes(connection)}" 
                            v-on:click="connect(connection)">connect
                            <span style="display:none" v-bind:tname="'fredis_'+connection.name">..</span></button>
                    <button class="uk-button" style="float:right;"
                            v-on:click="editOne(connection)">edit</button>
                </li>
            </ul>
        </div>
        <div id="terminals" style="width:75%;" class="uk-height-1-1">
            <div tname="edit" class="uk-width-1-1 uk-height-1-1">
                <div class="uk-form uk-width-1-1 uk-height-1-1" 
                     style="padding-top:20px;padding-bottom:10%;padding-left:20%;padding-right:40%;">
                    <div class="uk-form-row">
                        <input class="uk-form-width-large" v-model="form.name" placeholder="name">
                    </div>
                    <div class="uk-form-row">
                        <input class="uk-form-width-large" v-model="form.ws2sServer" placeholder="ws2s server"
                                id="ws2sServerForm" 
                                v-on:focus="onWs2sServerFormFocusChange()" 
                                v-on:blur="setTimeout(onWs2sServerFormFocusChange,1000)">
                    </div>
                    <div class="uk-form-row">
                        <input class="uk-form-width-large" v-model="form.host" placeholder="host">
                    </div>
                    <div class="uk-form-row">
                        <input class="uk-form-width-large" v-model.number="form.port" type="number" placeholder="port">
                    </div>
                    <div class="uk-form-row">
                        <input class="uk-form-width-large" v-model="form.auth" type="password" placeholder="auth (optional)">
                    </div>
                    <div class="uk-form-row">
                        <button class="uk-button uk-button-danger"
                                style="display:none;width:30%;"
                                v-show="redisConnections.includes(form)" 
                                v-on:click="deleteOne(form)">delete</button>
                        <button class="uk-button uk-button-primary"
                                style="float:right;width:30%;"
                                v-on:click="saveOne(form)">save</button>
                    </div>
                    <div class="uk-alert uk-alert-close" v-show="editHint">{{ editHint }}</div>
                    <div class="uk-alert uk-alert-close" v-show="ws2sServerFormIsFocus">
                        什么是ws2s？<br><br>
                        运行在浏览器上的 javaScript，只能使用 http、websocket 协议发出网络请求。然而，redis 客户端需要使用 socket 与服务端通信。<br><br>
                        ws2s server 是一个 websocket 服务端。使用 websocket 协议，按约定的数据格式与 ws2s server 通信。它就能帮你与 redis 服务端建立 socket 连接、使用这个 socket 连接发送数据、当这个 socket 连接收到数据时，ws2s server 也会把收到的数据通知给你。<br><br>
                        在能访问到你的 redis 服务端的机器上，<a href="https://github.com/playlay/ws2s#install" target="_blank">安装 ws2s</a>, 就能正常使用 fredis。
                    </div>
                </div>
            </div>
            <div style="display:none" class="uk-width-1-1 uk-height-1-1" 
                v-for="connection in redisConnections" :tname="'fredis_'+connection.name"></div>
        </div>
    </div>
</div>

<script src="./js/ws2s.js"></script>
<script src="./js/jquery.terminal.min.js"></script>
<link href="./css/jquery.terminal.min.css" rel="stylesheet"/>

<script>
    var vm = new Vue({
        el: "#main",
        data: {
            redisConnections: [],
            openedConnections: [],
            editingConnection: {},
            editHint: '',
            form: {
                name: '',
                ws2sServer: '',
                host: '',
                port: 6379,
                auth: ''
            },
            ws2sServerFormIsFocus: false,
        },
        mounted: function () {
            if (!localStorage.redis_connections || localStorage.redis_connections === '[]') {
                localStorage.redis_connections = JSON.stringify([{
                    name: 'try fredis',
                    ws2sServer: "wss://feling.io/ws2s-server/",
                    host: "172.17.248.195",
                    port: 6379,
                    auth: ''
                }])
            }
            this.redisConnections = JSON.parse(localStorage.redis_connections)
        },
        methods: {
            connect: function (connection) {
                if (this.openedConnections.includes(connection)) {
                    $('[tname]').hide()
                    $('[tname="fredis_' + connection.name + '"]').show()
                    return
                }
                var redis = new WS2S(connection.ws2sServer)
                    .newRedisCient(connection.host, connection.port, connection.auth)
                redis.onReady = () => {
                    var terminal = $('div[tname="fredis_' + connection.name + '"]').terminal(function (command, term) {
                        redis.request(command)
                    }, {
                            exit: false,
                            greetings: 'fredis, powered by ws2s project: https://github.com/playlay/ws2s'
                                + '\n\n'
                                + 'connected to ' + connection.name
                                + '(' + connection.host + ':' + connection.port + ')'
                                + ', you can now exec redis commands.',
                            name: 'fredis_' + connection.name,
                            height: '100%',
                            width: '100%',
                            prompt: '> '
                        })
                    redis.onResponse = (data) => {
                        terminal.echo(String(data))
                    }
                    redis.onError = (error) => {
                        terminal.error(JSON.stringify(error))
                    }
                    this.openedConnections.push(connection)
                    $('[tname]').hide()
                    $('[tname="fredis_' + connection.name + '"]').show()
                }
            },
            deleteOne: function (connection) {
                var index = this.redisConnections.indexOf(connection)
                if (index !== -1) {
                    this.redisConnections.splice(index, 1)
                    localStorage.redis_connections = JSON.stringify(this.redisConnections)
                    localStorage.removeItem('fredis_' + connection.name + '_0_interpreters')
                    localStorage.removeItem('fredis_' + connection.name + '_0_commands')
                    this.editOne()
                }
            },
            editOne: function (connection) {
                this.editHint = ''
                if (connection) {
                    this.editingConnection = connection
                    this.form = connection
                } else {
                    this.editingConnection = { name: '', ws2sServer: '', host: '', port: 6379, auth: '' }
                    this.form = { name: '', ws2sServer: '', host: '', port: 6379, auth: '' }
                }
                $('[tname]').hide()
                $('[tname="edit"]').show()
            },
            saveOne: function (connection) {
                this.editHint = ''
                if (!connection.host || !connection.ws2sServer) {
                    this.editHint = '信息不完整'
                    return
                }
                if (!connection.name) {
                    connection.name = connection.host + ':' + connection.port
                }
                var index = this.redisConnections.indexOf(this.editingConnection)
                if (index !== -1) {
                    this.redisConnections.splice(index, 1, connection)
                } else {
                    this.redisConnections.push(JSON.parse(JSON.stringify(connection)))
                }
                localStorage.redis_connections = JSON.stringify(this.redisConnections)
                this.editOne()
            },
            onWs2sServerFormFocusChange: function () {
                this.ws2sServerFormIsFocus = $('#ws2sServerForm').is(':focus')
            }
        }
    })
</script>

    </div>
    <footer>
    <script>
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?eb2e47d50973b9fd1a325718406ab901";
      var s = document.getElementsByTagName("script")[0]; 
      s.parentNode.insertBefore(hm, s);
    })();
</script>
    </footer>
</body>
</html>
